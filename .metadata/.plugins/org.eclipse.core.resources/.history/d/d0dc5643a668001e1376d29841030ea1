package com.hch.boot.board;


import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.ui.Model;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.hch.boot.PageService;

import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

@Service
public class BoardService {
	@Autowired private IBoardMapper dao;
	@Autowired private HttpSession session;
	
	public void boardForm(String cp,Model model) {
		int currentPage = 1;
		try{
			currentPage = Integer.parseInt(cp);
		}catch(Exception e){
			currentPage = 1; 
		}
		
		int pageBlock = 3;
		int end = pageBlock * currentPage;
		int begin = end - pageBlock + 1;
		
		List<BoardDTO> boards = dao.boardForm(begin, end);
		int totalCount = dao.totalCount();
		if(totalCount == 0) {
			return ;
		}
		
		String url = "boardForm?currentPage=";
		String result = PageService.printPage(url, totalCount, pageBlock, currentPage);
		
		model.addAttribute("boards",boards);
		model.addAttribute("result", result);
		
	}
	
	public String boardWriteProc(MultipartHttpServletRequest multi) {
		//System.out.println("title : " + multi.getParameter("title"));
		String sessionId = (String) session.getAttribute("id");
		if(sessionId == null) {
			return "redirect:login";
		}
		
		String title = multi.getParameter("title");
		if(title == null || title.trim().equals("")) {
			return "redirect:boardWrite";
		}
		
		BoardDTO board = new BoardDTO();
		board.setTitle(title);
		board.setContent(multi.getParameter("content"));
		board.setId(sessionId);
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		board.setWriteDate(sdf.format(new Date()));
		
		board.setFileName("");
		MultipartFile file = multi.getFile("upfile");
		if(file.getSize() != 0) {	//클라이언트가 파일을 업로드했다면
			//파일의 이름
			sdf = new SimpleDateFormat("yyyyMMddHHmmss-");
			String fileTime = sdf.format(new Date());
			String fileName = file.getOriginalFilename();
			
			//파일의 저장경로
			String fileSaveDirectory = "/opt/tomcat/tomcat-10/webapps/upload/"+sessionId;
			File f = new File(fileSaveDirectory);
			if(f.exists() == false) {
				f.mkdirs();
			}
			
			String fullPath = fileSaveDirectory + "/" + fileTime + fileName;
			board.setFileName(fullPath);
			f = new File(fullPath);
			
			try {
				file.transferTo(f);
			} catch (Exception e) {
				e.printStackTrace();
				board.setFileName("");
			}
			//<input="file" name="upfile">에서 서버로부터 파일 데이터가 전달되면 웹서버가 임시저장. 임시저장한 파일을 원하는 경로로 이동시킬때 transferTo사용
		}
		
		dao.boardWriteProc(board);
		
		return "redirect:boardForm";
	}

	public void boardContent(int no, Model model) {
		BoardDTO board = dao.boardContent(no);
		
		if(board != null) {
			dao.incrementHits(no);
			board.setHits(board.getHits()+1);
			
			if (board.getFileName() != null) {
				String[] names = board.getFileName().split("/"); // split에서 \\는 다른 기능이 있음. 그래서 폴더 분류에서 사용하려면 \\\\해야댐
				String fileNames[] = names[7].split("-", 2);
				board.setFileName(fileNames[1]);
			}
		}
		
		model.addAttribute("board", board);
	}
	
	public void boardDownload(int no, HttpServletResponse response) {
		String fullPath = dao.boardDownload(no);
		
		if(fullPath == null) {
			return ;
		}
		
		String[] names = fullPath.split("/");
		String fileNames[] = names[7].split("-", 2);
		
		try {
			File file = new File(fullPath);
			if(file.exists() == false) { return ; }
			
			//Header에 이것은 파일이라고 선언해주고 파일명에 한글이 된 것도 처리할 수 있게 인코딩까지 추가해줌
			response.setHeader("Content-Disposition", "attachment;filename=" + URLEncoder.encode(fileNames[1], "UTF-8"));
			FileInputStream fis = new FileInputStream(file);
			FileCopyUtils.copy(fis, response.getOutputStream());	//input,output 맞추려고 이렇게 구성했음
			fis.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}	

	public String boardDeleteProc(String no) {
		int n = 0;
		
		try {
			n = Integer.parseInt(no);
		}catch(Exception e) {
			return "게시글에 문제가 발생했습니다";
		}
		
		BoardDTO board = dao.boardContent(n);
		if(board == null) {
			return "게시글이 없습니다";
		}
		String sessionId = (String) session.getAttribute("id");
		if(board.getId().equals(sessionId) == false) {
			return "작성자만 삭제 가능합니다";
		}
		
		String fullPath = board.getFileName();
		if(fullPath != null) {
			File f = new File(fullPath);
			if(f.exists() == true) {
				f.delete();
			}
		}
		dao.boardDeleteProc(n);
		return "게시글 삭제 완료";
	}

	public String boardModify(int no, Model model) {
		BoardDTO board = dao.boardContent(no);
		
		if(board == null) { return "redirect:boardForm"; }
		
		if (board.getFileName() != null) {
			String[] names = board.getFileName().split("/");
			String fileNames[] = names[7].split("-", 2);
			board.setFileName(fileNames[1]);
		}
		
		model.addAttribute("board", board);
		
		return "board/boardModify";
	}

	public String boardModifyProc(BoardDTO board) {
		BoardDTO check = dao.boardContent(board.getNo());
		if(check == null) {
			return "게시글이 없습니다";
		}
		String sessionId = (String) session.getAttribute("id");
		if(check.getId().equals(sessionId) == false) {
			return "작성자만 삭제 가능합니다";
		}
		
		if(board.getTitle() == null || board.getTitle().trim().equals("")) {
			return "제목을 입력하세요";
		}
		
		int result = dao.boardModifyProc(board);
		
		if(result == 0) { return "게시글 수정 실패"; }
		return "게시글 수정 성공";
	}
	
	
}
